import { IPolygonQuery } from "../transport/request";
export interface IAggV2Raw {
    T?: string;
    v: number;
    o: number;
    c: number;
    h: number;
    l: number;
    t?: number;
    n?: number;
}
export interface IAggV2Formatted {
    T?: string;
    tickerSymbol?: string;
    v: number;
    volume: number;
    o: number;
    open: number;
    c: number;
    close: number;
    h: number;
    high: number;
    l: number;
    low: number;
    t?: number;
    timestamp?: number;
    n?: number;
    numberOfItems?: number;
}
export interface IAggResponseRaw {
    ticker: string;
    status: string;
    adjusted: boolean;
    queryCount?: number;
    resultsCount?: number;
    results: IAggV2Raw[];
}
export interface IAggResponseFormatted {
    ticker: string;
    status: string;
    adjusted: boolean;
    queryCount?: number;
    resultsCount?: number;
    results: IAggV2Formatted[];
}
export declare const formatIAggResponseRaw: (raw: IAggResponseRaw) => IAggResponseFormatted;
export interface IAggregateQuery extends IPolygonQuery {
    adjusted?: boolean;
}
export declare const stocksPreviousClose: (apiKey: string, apiBase: string, ticker: string, query?: IAggregateQuery) => Promise<IAggResponseFormatted>;
export declare const stocksAggregates: (apikey: string, apiBase: string, ticker: string, multiplier: number, timespan: string, from: string, to: string, query?: IAggregateQuery) => Promise<IAggResponseFormatted>;
export declare const stocksGroupedDaily: (apiKey: string, apiBase: string, locale: string, market: string, date: string, query?: IAggregateQuery) => Promise<IAggResponseFormatted>;
